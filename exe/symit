#!/usr/bin/env bash
#
#
# (c) 2017 Konstantin Gredeskoul
# MIT License, distributed as part of `sym` ruby gem
#
# https://github.com/kigster/sym
#
#====================================================================================
# Purpuse of this script is to transparently edit application secrets in a Rails app.
#
# Modify the `default*` variables below and then you can use the script like so:
#
# bin/secred <production | staging | development> [ key-spec ]
#
#
# SET THE VALUE BELOW WITH THE NAME OF YOUR KEY (actual key, environment variable,
# keychain name, etc)

[[ -n $1 && ${1:0:1} != "-" ]] && {
  encrypted_file=$1
  shift
}

symit::init() {
  symit::install

  export default_key=
  export default_extension="yml.enc"
  export default_folder=config/settings/secrets

  export true=1
  export false=0

  export txtrst='\e[0m'    # Text Reset
  export bldred='\e[1;31m' # Red
  export bldgrn='\e[1;32m' # Green
  export bldylw='\e[1;33m' # Yellow
  export bldblu='\e[1;34m' # Blue

  unset cli__opts
  declare -A cli__opts=(
    [verbose]=${true}
    [key]=${default_key}
    [extension]=${default_extension}
    [dry_run]=${false}
  )
}

symit::usage() {
  printf "${bldblu}symit: ${txtrst}edit an encrypted file using a pre-defined key\n\n"

  printf " Usage: ${bldgrn}symit ${bldylw}[file-spec] [options]${txtrst}\n\n"

  printf " # To edit an encrypted file config/settings/secrets/development.yml.enc${txtrst}\n"
  printf "        ${bldgrn}symit${bldylw} development${txtrst}\n\n"

  printf "options: \n"
  printf "    -k | --key         [key-spec]   Pass an alternative key, other than ${default_key}\n"
  printf "    -x | --extension   [extension]  Pass an alternative default extension, other than ${bldylw}${default_extension}${txtrst}\n"
  printf "    -l | --locations                Print locations where [file-spec] is searched\n"
  printf "    -h | --help                     Show this help message\n"
  printf "    -n | --dry-run                  Show the generated sym command\n"
  exit 1
}

symit::error() {
  printf "${bldred}error: $* ${bldylw}\n"
  exit 255
}

symit::install() {
  if [[ -z "${_symit__installed}" ]] ; then
    [[ -n "$(gem list | grep sym)" ]] || gem install sym
    [[ -z $(sym -h 2>&1 | grep -- '-k, --key' | grep keychain) ]] && {
      printf "detected missing or an older version of ${bldgrn}sym${txtrst}... upgrading...\n"
      echo y | gem uninstall sym -a 2>/dev/null
      gem install sym --verbose
    }
  fi
}

symit::show_locations() {
  printf "Search path: \n"
  for loc in ${locations[@]}; do
    printf "     - ${loc}\n"
  done
}


symit::locs() {
  if [[ -n ${encrypted_file} ]]; then
    declare -a locations=("${default_folder}/${encrypted_file}.${default_extension}"
                       "${default_folder}/${encrypted_file}"
                       "${encrypted_file}")
  fi
  echo -n ${locations[*]}
}

symit::init

[[ -z ${encrypted_file} && -z $* ]] && symit::usage

while :; do
  case $1 in
    -h|-\?|--help)
        shift
        symit::usage
        ;;

    -k|--key)
        shift
        [[ -n $1 ]] || symit::error "-k/--key requires an argument"
        cli__opts[key]=$1
        ;;

    -x|--extension)
        shift
        [[ -n $1 ]] || symit::error "-x/--extension requires an argument"
        cli__opts[extension]=$1
        ;;

    -l|--locations)
        shift
        [[ -n ${encrypted_file} ]] || symit::error "-l/--locations requires file-spec to be provided as the 1st argument"
        declare -a locations=$(symit::locs)
        symit::show_locations
        exit 0
        ;;
    -n|--dry-run)
        shift
        cli__opts[dry_run]=${true}
        ;;

    --)              # End of all options.
        shift
        break
        ;;
    -?*)
        printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
        exit 127
        shift
        ;;
    *)               # Default case: If no more options then break out of the loop.
        break
        shift
  esac
done

declare -a locations=$(symit::locs)

file=
for loc in ${locations[@]}; do
  if [[ -s "${loc}" ]] ; then
    file=${loc}
    break
  fi
done

[[ -z $file ]] && symit::error "${encrypted_file} could not be found."

command="sym -ck $cli__opts[key] -tf ${file}"

${cli_opts[dry_run]} && printf "[dry_run] "

printf "${bldgrn}${command}${txtrst}\n"

${cli_opts[dry_run]} || ${command}
